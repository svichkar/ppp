

https://docs.google.com/document/d/1WoX7F1zOpUeAZzDkTpFDwO4xq1WAH2w_q6CqL84hwB4/edit (sql basics)
https://docs.google.com/document/d/1SPnixf2YWtTG7kSISwtZWo3RF0OtJB6CyWDA4Z0Lkr8/edit (jdbc)

Практическое задание

1. Написать консольное приложение с помощью JDBC, которое бы создавало таблицы и их связи в БД, 
в соответствии с проработанной ранее схемой БД. Соединение к БД должно устанавливаться с помощью DriverManager.
2. Написать консольное приложение с помощью JDBC, которое бы удаляло все таблицы в БД. 
Соединение к БД должно устанавливаться с помощью DriverManager.
3. Написать свой ConnectionManager, который будет открывать и закрывать соединения к БД. 
Менеджер соединений должен использовать пул соединений H2. Пул соединений должен быть синглетоном 
(инициализироваться только при первом обращении к менеджеру соединений).
4. Реализовать DAO для всех сущностей с помощью JDBC. Все DAO должны содержать create/update/delete, 
а так же find методы, которые могут быть полезными при написании Web-приложения по вашей теме.
5. Реализовать одно из DAO с ручным управлением транзакций.
6. Реализовать DAOFactory для ваших DAO.
7. Реализовать консольное приложение, которое бы продемонстрировало работу с БД каждой из сущностей при помощи DAO.

Требования к работе

1. Настройки к БД должны подтягиваться из файла jdbc.properties
2. Используйте log4j для логирования исключений
3. Проект должен собираться с помощью Maven

Самостоятельное обучение (обязательно)

1. Изучить DBUnit и с его помощью покрыть тестами код.

1. Учет книг.
2. Учет категорий книг.
3. Учет авторов книг.
4. Учет ячеек для книг.
5. Учет клиентов библиотеки.
6. Учет арендованных книг.
7. Поиск книг по названию/авторам/категориям.
8. Поиск книг в библиотеке.
9. Поиск книг, отданных в аренду.